package com.paevolution.appioproducer.ws.client.model;
/*
 * AppIOGateway API Connettore ad IO Italia
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */

import java.sql.Timestamp;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.swagger.annotations.ApiModelProperty;

/**
 * StatusMessageResponse
 */
@JsonPropertyOrder({ StatusMessageResponse.JSON_PROPERTY_IDCOMUNE, StatusMessageResponse.JSON_PROPERTY_CODICECOMUNE,
	StatusMessageResponse.JSON_PROPERTY_SOFTWARE, StatusMessageResponse.JSON_PROPERTY_TIME_TO_LIVE, StatusMessageResponse.JSON_PROPERTY_SUBJECT,
	StatusMessageResponse.JSON_PROPERTY_MARKDOWN, StatusMessageResponse.JSON_PROPERTY_EMAIL_NOTIFICATION,
	StatusMessageResponse.JSON_PROPERTY_WEBHOOK_NOTIFICATION, StatusMessageResponse.JSON_PROPERTY_STATUS,
	StatusMessageResponse.JSON_PROPERTY_MESSAGE_ID, StatusMessageResponse.JSON_PROPERTY_FISCAL_CODE,
	StatusMessageResponse.JSON_PROPERTY_CREATED_AT, StatusMessageResponse.JSON_PROPERTY_DUE_DATE,
	StatusMessageResponse.JSON_PROPERTY_SENDER_SERVICE_ID, StatusMessageResponse.JSON_PROPERTY_SENDER_ALLOWED,
	StatusMessageResponse.JSON_PROPERTY_PREFERRED_LANGUAGE, StatusMessageResponse.JSON_PROPERTY_ID_TRANSAZIONE })
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-03-18T11:12:23.623+01:00[Europe/Berlin]")
public class StatusMessageResponse {

    public static final String JSON_PROPERTY_IDCOMUNE = "idcomune";
    private String idcomune;
    public static final String JSON_PROPERTY_CODICECOMUNE = "codicecomune";
    private String codicecomune;
    public static final String JSON_PROPERTY_SOFTWARE = "software";
    private String software;
    public static final String JSON_PROPERTY_TIME_TO_LIVE = "timeToLive";
    private Integer timeToLive;
    public static final String JSON_PROPERTY_SUBJECT = "subject";
    private String subject;
    public static final String JSON_PROPERTY_MARKDOWN = "markdown";
    private String markdown;
    public static final String JSON_PROPERTY_EMAIL_NOTIFICATION = "emailNotification";
    private String emailNotification;
    public static final String JSON_PROPERTY_WEBHOOK_NOTIFICATION = "webhookNotification";
    private String webhookNotification;
    public static final String JSON_PROPERTY_STATUS = "status";
    private String status;
    public static final String JSON_PROPERTY_MESSAGE_ID = "message_id";
    private String messageId;
    public static final String JSON_PROPERTY_FISCAL_CODE = "fiscal_code";
    private String fiscalCode;
    public static final String JSON_PROPERTY_CREATED_AT = "created_at";
    private Timestamp createdAt;
    public static final String JSON_PROPERTY_DUE_DATE = "due_date";
    private Timestamp dueDate;
    public static final String JSON_PROPERTY_SENDER_SERVICE_ID = "sender_service_id";
    private String senderServiceId;
    public static final String JSON_PROPERTY_SENDER_ALLOWED = "sender_allowed";
    private Boolean senderAllowed;
    public static final String JSON_PROPERTY_PREFERRED_LANGUAGE = "preferred_language";
    private String preferredLanguage;
    public static final String JSON_PROPERTY_ID_TRANSAZIONE = "id_transazione";
    private String idTransazione;

    public StatusMessageResponse idcomune(String idcomune) {

	this.idcomune = idcomune;
	return this;
    }

    /**
     * Get idcomune
     * 
     * @return idcomune
     **/
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_IDCOMUNE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getIdcomune() {

	return idcomune;
    }

    public void setIdcomune(String idcomune) {

	this.idcomune = idcomune;
    }

    public StatusMessageResponse codicecomune(String codicecomune) {

	this.codicecomune = codicecomune;
	return this;
    }

    /**
     * Get codicecomune
     * 
     * @return codicecomune
     **/
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_CODICECOMUNE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCodicecomune() {

	return codicecomune;
    }

    public void setCodicecomune(String codicecomune) {

	this.codicecomune = codicecomune;
    }

    public StatusMessageResponse software(String software) {

	this.software = software;
	return this;
    }

    /**
     * Get software
     * 
     * @return software
     **/
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_SOFTWARE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSoftware() {

	return software;
    }

    public void setSoftware(String software) {

	this.software = software;
    }

    public StatusMessageResponse timeToLive(Integer timeToLive) {

	this.timeToLive = timeToLive;
	return this;
    }

    /**
     * Get timeToLive
     * 
     * @return timeToLive
     **/
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_TIME_TO_LIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getTimeToLive() {

	return timeToLive;
    }

    public void setTimeToLive(Integer timeToLive) {

	this.timeToLive = timeToLive;
    }

    public StatusMessageResponse subject(String subject) {

	this.subject = subject;
	return this;
    }

    /**
     * The subject of the message - note that only some notification channels support the display of a subject. When a
     * subject is not provided, one gets generated from the client attributes.
     * 
     * @return subject
     **/
    @ApiModelProperty(example = "Welcome new user !", value = "The subject of the message - note that only some notification  channels support the display of a subject. When a subject is not provided,  one gets generated from the client attributes.")
    @JsonProperty(JSON_PROPERTY_SUBJECT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSubject() {

	return subject;
    }

    public void setSubject(String subject) {

	this.subject = subject;
    }

    public StatusMessageResponse markdown(String markdown) {

	this.markdown = markdown;
	return this;
    }

    /**
     * The full version of the message, in plain text or Markdown format. The content of this field will be delivered to
     * channels that don&#39;t have any limit in terms of content size (e.g. email, etc...).
     * 
     * @return markdown
     **/
    @ApiModelProperty(example = "# This is a markdown header to show how easily markdown can be converted to **HTML** Remember: this has to be a long text.", value = "The full version of the message, in plain text or Markdown format. The  content of this field will be delivered to channels that don't have any  limit in terms of content size (e.g. email, etc...).")
    @JsonProperty(JSON_PROPERTY_MARKDOWN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMarkdown() {

	return markdown;
    }

    public void setMarkdown(String markdown) {

	this.markdown = markdown;
    }

    public StatusMessageResponse emailNotification(String emailNotification) {

	this.emailNotification = emailNotification;
	return this;
    }

    /**
     * The status of a notification (one for each channel). \&quot;SENT\&quot;: the notification was succesfully sent to
     * the channel (ie. email or push notification) \&quot;THROTTLED\&quot;: a temporary failure caused a retry during
     * the notification processing; the notification associated with this channel will be delayed for a maximum of 7
     * days or until the message expires \&quot;EXPIRED\&quot;: the message expired before the notification could be
     * sent; this means that the maximum message time to live was reached; no notification will be sent to this channel
     * \&quot;FAILED\&quot;: a permanent failure caused the process to exit with an error, no notification will be sent
     * to this channel
     * 
     * @return emailNotification
     **/
    @ApiModelProperty(value = "The status of a notification (one for each channel). \"SENT\": the notification was succesfully sent to the channel (ie. email or push notification) \"THROTTLED\": a temporary failure caused a retry during the notification processing; the notification associated with this channel will be delayed for a maximum of 7 days or until the message expires \"EXPIRED\": the message expired before the notification could be sent; this means that the maximum message time to live was reached; no notification will be sent to this channel \"FAILED\": a permanent failure caused the process to exit with an error, no notification will be sent to this channel")
    @JsonProperty(JSON_PROPERTY_EMAIL_NOTIFICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getEmailNotification() {

	return emailNotification;
    }

    public void setEmailNotification(String emailNotification) {

	this.emailNotification = emailNotification;
    }

    public StatusMessageResponse webhookNotification(String webhookNotification) {

	this.webhookNotification = webhookNotification;
	return this;
    }

    /**
     * The status of a notification (one for each channel). \&quot;SENT\&quot;: the notification was succesfully sent to
     * the channel (ie. email or push notification) \&quot;THROTTLED\&quot;: a temporary failure caused a retry during
     * the notification processing; the notification associated with this channel will be delayed for a maximum of 7
     * days or until the message expires \&quot;EXPIRED\&quot;: the message expired before the notification could be
     * sent; this means that the maximum message time to live was reached; no notification will be sent to this channel
     * \&quot;FAILED\&quot;: a permanent failure caused the process to exit with an error, no notification will be sent
     * to this channel
     * 
     * @return webhookNotification
     **/
    @ApiModelProperty(value = "The status of a notification (one for each channel). \"SENT\": the notification was succesfully sent to the channel (ie. email or push notification) \"THROTTLED\": a temporary failure caused a retry during the notification processing; the notification associated with this channel will be delayed for a maximum of 7 days or until the message expires \"EXPIRED\": the message expired before the notification could be sent; this means that the maximum message time to live was reached; no notification will be sent to this channel \"FAILED\": a permanent failure caused the process to exit with an error, no notification will be sent to this channel")
    @JsonProperty(JSON_PROPERTY_WEBHOOK_NOTIFICATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getWebhookNotification() {

	return webhookNotification;
    }

    public void setWebhookNotification(String webhookNotification) {

	this.webhookNotification = webhookNotification;
    }

    public StatusMessageResponse status(String status) {

	this.status = status;
	return this;
    }

    /**
     * The processing status of a message. \&quot;ACCEPTED\&quot;: the message has been accepted and will be processed
     * for delivery; we&#39;ll try to store its content in the user&#39;s inbox and notify him on his preferred channels
     * \&quot;THROTTLED\&quot;: a temporary failure caused a retry during the message processing; any notification
     * associated with this message will be delayed for a maximum of 7 days \&quot;FAILED\&quot;: a permanent failure
     * caused the process to exit with an error, no notification will be sent for this message \&quot;PROCESSED\&quot;:
     * the message was succesfully processed and is now stored in the user&#39;s inbox; we&#39;ll try to send a
     * notification for each of the selected channels \&quot;REJECTED\&quot;: either the recipient does not exist, or
     * the sender has been blocked
     * 
     * @return status
     **/
    @ApiModelProperty(value = "The processing status of a message. \"ACCEPTED\": the message has been accepted and will be processed for delivery; we'll try to store its content in the user's inbox and notify him on his preferred channels \"THROTTLED\": a temporary failure caused a retry during the message processing; any notification associated with this message will be delayed for a maximum of 7 days \"FAILED\": a permanent failure caused the process to exit with an error, no notification will be sent for this message \"PROCESSED\": the message was succesfully processed and is now stored in the user's inbox; we'll try to send a notification for each of the selected channels \"REJECTED\": either the recipient does not exist, or the sender has been blocked")
    @JsonProperty(JSON_PROPERTY_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getStatus() {

	return status;
    }

    public void setStatus(String status) {

	this.status = status;
    }

    public StatusMessageResponse messageId(String messageId) {

	this.messageId = messageId;
	return this;
    }

    /**
     * Identificativo univoco del messaggio fornito dal sistema mittente.
     * 
     * @return messageId
     **/
    @ApiModelProperty(value = "Identificativo univoco del messaggio fornito dal sistema mittente.")
    @JsonProperty(JSON_PROPERTY_MESSAGE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getMessageId() {

	return messageId;
    }

    public void setMessageId(String messageId) {

	this.messageId = messageId;
    }

    public StatusMessageResponse fiscalCode(String fiscalCode) {

	this.fiscalCode = fiscalCode;
	return this;
    }

    /**
     * Get fiscalCode
     * 
     * @return fiscalCode
     **/
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_FISCAL_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFiscalCode() {

	return fiscalCode;
    }

    public void setFiscalCode(String fiscalCode) {

	this.fiscalCode = fiscalCode;
    }

    public StatusMessageResponse createdAt(Timestamp createdAt) {

	this.createdAt = createdAt;
	return this;
    }

    /**
     * A date-time field in ISO-8601 format and UTC timezone.
     * 
     * @return createdAt
     **/
    @ApiModelProperty(example = "2018-10-13T00:00Z", value = "A date-time field in ISO-8601 format and UTC timezone.")
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Timestamp getCreatedAt() {

	return createdAt;
    }

    public void setCreatedAt(Timestamp createdAt) {

	this.createdAt = createdAt;
    }

    public StatusMessageResponse dueDate(Timestamp dueDate) {

	this.dueDate = dueDate;
	return this;
    }

    /**
     * A date-time field in ISO-8601 format and UTC timezone.
     * 
     * @return dueDate
     **/
    @ApiModelProperty(example = "2018-10-13T00:00Z", value = "A date-time field in ISO-8601 format and UTC timezone.")
    @JsonProperty(JSON_PROPERTY_DUE_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Timestamp getDueDate() {

	return dueDate;
    }

    public void setDueDate(Timestamp dueDate) {

	this.dueDate = dueDate;
    }

    public StatusMessageResponse senderServiceId(String senderServiceId) {

	this.senderServiceId = senderServiceId;
	return this;
    }

    /**
     * Identificativo del servizio al quale è registrato il mittente del messaggio.
     * 
     * @return senderServiceId
     **/
    @ApiModelProperty(value = "Identificativo del servizio al quale è registrato il mittente del messaggio.")
    @JsonProperty(JSON_PROPERTY_SENDER_SERVICE_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSenderServiceId() {

	return senderServiceId;
    }

    public void setSenderServiceId(String senderServiceId) {

	this.senderServiceId = senderServiceId;
    }

    public StatusMessageResponse senderAllowed(Boolean senderAllowed) {

	this.senderAllowed = senderAllowed;
	return this;
    }

    /**
     * True in case the service that made the request can send messages to the user identified by this profile (false
     * otherwise).
     * 
     * @return senderAllowed
     **/
    @ApiModelProperty(value = "True in case the service that made the request can send messages to the user identified by this profile (false otherwise).")
    @JsonProperty(JSON_PROPERTY_SENDER_ALLOWED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getSenderAllowed() {

	return senderAllowed;
    }

    public void setSenderAllowed(Boolean senderAllowed) {

	this.senderAllowed = senderAllowed;
    }

    public StatusMessageResponse preferredLanguage(String preferredLanguage) {

	this.preferredLanguage = preferredLanguage;
	return this;
    }

    /**
     * Indicates the User&#39;s preferred written or spoken languages in order of preference. Generally used for
     * selecting a localized User interface. Valid values are concatenation of the ISO 639-1 two letter language code,
     * an underscore, and the ISO 3166-1 2 letter country code; e.g., &#39;en_US&#39; specifies the language English and
     * country US.
     * 
     * @return preferredLanguage
     **/
    @ApiModelProperty(value = "Indicates the User's preferred written or spoken languages in order of preference. Generally used for selecting a localized User interface. Valid values are concatenation of the ISO 639-1 two letter language code, an underscore, and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies the language English and country US.")
    @JsonProperty(JSON_PROPERTY_PREFERRED_LANGUAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPreferredLanguage() {

	return preferredLanguage;
    }

    public void setPreferredLanguage(String preferredLanguage) {

	this.preferredLanguage = preferredLanguage;
    }

    public StatusMessageResponse idTransazione(String idTransazione) {

	this.idTransazione = idTransazione;
	return this;
    }

    /**
     * The identifier of the created message.
     * 
     * @return idTransazione
     **/
    @ApiModelProperty(value = "The identifier of the created message.")
    @JsonProperty(JSON_PROPERTY_ID_TRANSAZIONE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getIdTransazione() {

	return idTransazione;
    }

    public void setIdTransazione(String idTransazione) {

	this.idTransazione = idTransazione;
    }

    @Override
    public boolean equals(java.lang.Object o) {

	if (this == o) {
	    return true;
	}
	if (o == null || getClass() != o.getClass()) {
	    return false;
	}
	StatusMessageResponse statusMessageResponse = (StatusMessageResponse) o;
	return Objects.equals(this.idcomune, statusMessageResponse.idcomune) && Objects.equals(this.codicecomune, statusMessageResponse.codicecomune)
		&& Objects.equals(this.software, statusMessageResponse.software) && Objects.equals(this.timeToLive, statusMessageResponse.timeToLive)
		&& Objects.equals(this.subject, statusMessageResponse.subject) && Objects.equals(this.markdown, statusMessageResponse.markdown)
		&& Objects.equals(this.emailNotification, statusMessageResponse.emailNotification)
		&& Objects.equals(this.webhookNotification, statusMessageResponse.webhookNotification)
		&& Objects.equals(this.status, statusMessageResponse.status) && Objects.equals(this.messageId, statusMessageResponse.messageId)
		&& Objects.equals(this.fiscalCode, statusMessageResponse.fiscalCode)
		&& Objects.equals(this.createdAt, statusMessageResponse.createdAt) && Objects.equals(this.dueDate, statusMessageResponse.dueDate)
		&& Objects.equals(this.senderServiceId, statusMessageResponse.senderServiceId)
		&& Objects.equals(this.senderAllowed, statusMessageResponse.senderAllowed)
		&& Objects.equals(this.preferredLanguage, statusMessageResponse.preferredLanguage)
		&& Objects.equals(this.idTransazione, statusMessageResponse.idTransazione);
    }

    @Override
    public int hashCode() {

	return Objects.hash(idcomune, codicecomune, software, timeToLive, subject, markdown, emailNotification, webhookNotification, status,
		messageId, fiscalCode, createdAt, dueDate, senderServiceId, senderAllowed, preferredLanguage, idTransazione);
    }

    @Override
    public String toString() {

	StringBuilder sb = new StringBuilder();
	sb.append("class StatusMessageResponse {\n");
	sb.append("    idcomune: ").append(toIndentedString(idcomune)).append("\n");
	sb.append("    codicecomune: ").append(toIndentedString(codicecomune)).append("\n");
	sb.append("    software: ").append(toIndentedString(software)).append("\n");
	sb.append("    timeToLive: ").append(toIndentedString(timeToLive)).append("\n");
	sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
	sb.append("    markdown: ").append(toIndentedString(markdown)).append("\n");
	sb.append("    emailNotification: ").append(toIndentedString(emailNotification)).append("\n");
	sb.append("    webhookNotification: ").append(toIndentedString(webhookNotification)).append("\n");
	sb.append("    status: ").append(toIndentedString(status)).append("\n");
	sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
	sb.append("    fiscalCode: ").append(toIndentedString(fiscalCode)).append("\n");
	sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
	sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
	sb.append("    senderServiceId: ").append(toIndentedString(senderServiceId)).append("\n");
	sb.append("    senderAllowed: ").append(toIndentedString(senderAllowed)).append("\n");
	sb.append("    preferredLanguage: ").append(toIndentedString(preferredLanguage)).append("\n");
	sb.append("    idTransazione: ").append(toIndentedString(idTransazione)).append("\n");
	sb.append("}");
	return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {

	if (o == null) {
	    return "null";
	}
	return o.toString().replace("\n", "\n    ");
    }
}
